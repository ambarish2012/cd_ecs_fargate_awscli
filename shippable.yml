resources:
# Automation scripts repo
  - name: cd_ecs_fargate_repo
    type: gitRepo
    integration: "drship_github"
    versionTemplate:
      sourceName: "ambarish2012/cd_ecs_fargate_awscli"
      branch: master

# AWS credentials
  - name: cd_ecs_fargate_creds
    type: integration
    integration: "drship_aws"

jobs:
  - name: deploy_app_ecs_fargate_deployment_strategy_replace
    type: runSh
    steps:
      - IN: node_app_img_dh # defined here https://github.com/devops-recipes/node_app/blob/master/shippable.yml
      - IN: cd_ecs_fargate_repo
        switch: off
      - IN: cd_ecs_fargate_creds
        switch: off
      - TASK:
          name: deployment_strategy_replace
          runtime:
            options:
              env:
                - CLUSTER_NAME: "deploy-ecs-fargate"
                - SERVICE_NAME: "node_app_service"
                - FAMILY: "ecs_fargate_task"
                - DESIRED_TASK_COUNT: 1
                - CPU: 1024
                - MEMORY: 2048
                - SUBNET_ID: "subnet-34378e50"
                - SECURITY_GROUP_ID: "sg-a23ee1d0"
                - AWS_REGION: "us-east-1"
          script:
            - REPO_DIR=$(shipctl get_resource_state "cd_ecs_fargate_repo")
            - pushd $REPO_DIR/specs
            - aws configure set aws_access_key_id $(shipctl get_integration_resource_field cd_ecs_fargate_creds "accessKey")
            - aws configure set aws_secret_access_key $(shipctl get_integration_resource_field cd_ecs_fargate_creds "secretKey")
            - aws configure set default.region ${AWS_REGION}
            - export APP_IMG=$(shipctl get_resource_version_key node_app_img_dh sourceName)
            - export APP_TAG=$(shipctl get_resource_version_name node_app_img_dh)
            - shipctl replace taskdefinition.json
            - aws ecs register-task-definition --cli-input-json file://${REPO_DIR}/specs/taskdefinition.json > output.json
            - export REVISION=$(cat output.json | jq '.taskDefinition.revision')
            - shipctl replace servicedefinition.json
            - popd
            - aws ecs create-cluster --cluster-name ${CLUSTER_NAME}
            - ${REPO_DIR}/utilities/replace_deployment_strategy.sh ${CLUSTER_NAME} ${SERVICE_NAME} ${REPO_DIR}
            - ${REPO_DIR}/utilities/check_service_stability.sh ${CLUSTER_NAME} ${SERVICE_NAME} ${DESIRED_TASK_COUNT} 5
            - PUBLIC_IP=$(${REPO_DIR}/utilities/get_ecs_service_public_ip.sh ${CLUSTER_NAME} ${SERVICE_NAME} ${REPO_DIR})
            - curl ${PUBLIC_IP}
    flags:
      - cd
      - awscli
      - fargate

  - name: deploy_app_ecs_fargate_deployment_strategy_upgrade
    type: runSh
    steps:
      - IN: node_app_img_dh # defined here https://github.com/devops-recipes/node_app/blob/master/shippable.yml
      - IN: cd_ecs_fargate_repo
        switch: off
      - IN: cd_ecs_fargate_creds
        switch: off
      - TASK:
          name: deployment_strategy_upgrade
          runtime:
            options:
              env:
                - CLUSTER_NAME: "deploy-ecs-fargate"
                - SERVICE_NAME: "node_app_service"
                - FAMILY: "ecs_fargate_task"
                - DESIRED_TASK_COUNT: 1
                - CPU: 256
                - MEMORY: 512
                - SUBNET_ID: "subnet-34378e50"
                - SECURITY_GROUP_ID: "sg-a23ee1d0"
                - AWS_REGION: "us-east-1"
          script:
            - REPO_DIR=$(shipctl get_resource_state "cd_ecs_fargate_repo")
            - pushd $REPO_DIR/specs
            - aws configure set aws_access_key_id $(shipctl get_integration_resource_field cd_ecs_fargate_creds "accessKey")
            - aws configure set aws_secret_access_key $(shipctl get_integration_resource_field cd_ecs_fargate_creds "secretKey")
            - aws configure set default.region ${AWS_REGION}
            - export APP_IMG=$(shipctl get_resource_version_key node_app_img_dh sourceName)
            - export APP_TAG=$(shipctl get_resource_version_name node_app_img_dh)
            - shipctl replace taskdefinition.json
            - aws ecs register-task-definition --cli-input-json file://${REPO_DIR}/specs/taskdefinition.json > output.json
            - export REVISION=$(cat output.json | jq '.taskDefinition.revision')
            - popd
            - ${REPO_DIR}/utilities/upgrade_deployment_strategy.sh ${CLUSTER_NAME} ${SERVICE_NAME} ${FAMILY}:${REVISION}
            - ${REPO_DIR}/utilities/check_service_stability.sh ${CLUSTER_NAME} ${SERVICE_NAME} ${DESIRED_TASK_COUNT} 5
            - PUBLIC_IP=$(${REPO_DIR}/utilities/get_ecs_service_public_ip.sh ${CLUSTER_NAME} ${SERVICE_NAME} ${REPO_DIR})
            - curl ${PUBLIC_IP}
    flags:
      - cd
      - awscli
      - fargate

  - name: deploy_app_ecs_fargate_deployment_strategy_bluegreen
    type: runSh
    steps:
      - IN: node_app_img_dh # defined here https://github.com/devops-recipes/node_app/blob/master/shippable.yml
      - IN: cd_ecs_fargate_repo
        switch: off
      - IN: cd_ecs_fargate_creds
        switch: off
      - TASK:
          name: deployment_strategy_bluegreen
          runtime:
            options:
              env:
                - CLUSTER_NAME: "deploy-ecs-fargate"
                - SERVICE_NAME: "node_app_service"
                - FAMILY: "ecs_fargate_task"
                - DESIRED_TASK_COUNT: 1
                - CPU: 1024
                - MEMORY: 2048
                - SUBNET_ID: "subnet-34378e50"
                - SECURITY_GROUP_ID: "sg-a23ee1d0"
                - AWS_REGION: "us-east-1"
          script:
            - shipctl copy_file_from_prev_state serviceId.env .
            - |
              if [ -f serviceId.env ]; then
                . serviceId.env
                let "serviceId++"
              else
                serviceId=${BUILD_NUMBER}
                echo "serviceId=${BUILD_NUMBER}" > serviceId.env
              fi
            - echo ${serviceId}
            - shipctl copy_file_to_state serviceId.env
